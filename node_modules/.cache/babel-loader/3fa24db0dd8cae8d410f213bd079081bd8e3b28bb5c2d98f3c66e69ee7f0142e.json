{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0424\\u0430\\u043A\\u0443\\u043B\\u0442\\u0435\\u0442\\\\petti semestar\\\\DAS\\\\Homework1\\\\HomeWork2\\\\prototip\\\\msa_frontend\\\\src\\\\components\\\\indicators\\\\GraphComponet.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport styles from \"./GraphComponent.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst GraphComponent = ({\n  tickerId\n}) => {\n  _s();\n  const [indicators, setIndicators] = useState([]);\n  useEffect(() => {\n    if (!tickerId) return;\n    const fetchIndicators = async () => {\n      try {\n        const response = await fetch(`http://localhost:8081/api/stock-indicators/${tickerId}`);\n        const data = await response.json();\n        setIndicators(data);\n      } catch (error) {\n        console.error(\"Error fetching indicators:\", error);\n      }\n    };\n    fetchIndicators();\n  }, [tickerId]);\n  const chartData = {\n    labels: indicators.map(item => item.date),\n    // Assuming date is in a usable format\n    datasets: [{\n      label: \"SMA 50\",\n      data: indicators.map(item => item.sma50),\n      borderColor: \"blue\",\n      fill: false\n    }, {\n      label: \"SMA 200\",\n      data: indicators.map(item => item.sma200),\n      borderColor: \"green\",\n      fill: false\n    }, {\n      label: \"EMA 50\",\n      data: indicators.map(item => item.ema50),\n      borderColor: \"orange\",\n      fill: false\n    }, {\n      label: \"EMA 200\",\n      data: indicators.map(item => item.ema200),\n      borderColor: \"red\",\n      fill: false\n    }, {\n      label: \"RSI\",\n      data: indicators.map(item => item.rsi),\n      borderColor: \"purple\",\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.graphContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Technical Indicators for Ticker \", tickerId.tickerId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(GraphComponent, \"2dx74LO4juDiQTrlpXGeBguVZrw=\");\n_c = GraphComponent;\nexport default GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","styles","jsxDEV","_jsxDEV","register","GraphComponent","tickerId","_s","indicators","setIndicators","fetchIndicators","response","fetch","data","json","error","console","chartData","labels","map","item","date","datasets","label","sma50","borderColor","fill","sma200","ema50","ema200","rsi","className","graphContainer","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Факултет/petti semestar/DAS/Homework1/HomeWork2/prototip/msa_frontend/src/components/indicators/GraphComponet.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\r\nimport styles from \"./GraphComponent.module.css\";\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst GraphComponent = ({tickerId}) => {\r\n\r\n    const [indicators, setIndicators] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (!tickerId) return;\r\n\r\n        const fetchIndicators = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:8081/api/stock-indicators/${tickerId}`);\r\n                const data = await response.json();\r\n                setIndicators(data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching indicators:\", error);\r\n            }\r\n        };\r\n\r\n        fetchIndicators();\r\n    }, [tickerId]);\r\n\r\n    const chartData = {\r\n        labels: indicators.map((item) => (item.date)), // Assuming date is in a usable format\r\n        datasets: [\r\n            {\r\n                label: \"SMA 50\",\r\n                data: indicators.map(item => item.sma50),\r\n                borderColor: \"blue\",\r\n                fill: false,\r\n            },\r\n            {\r\n                label: \"SMA 200\",\r\n                data: indicators.map(item => item.sma200),\r\n                borderColor: \"green\",\r\n                fill: false,\r\n            },\r\n            {\r\n                label: \"EMA 50\",\r\n                data: indicators.map(item => item.ema50),\r\n                borderColor: \"orange\",\r\n                fill: false,\r\n            },\r\n            {\r\n                label: \"EMA 200\",\r\n                data: indicators.map(item => item.ema200),\r\n                borderColor: \"red\",\r\n                fill: false,\r\n            },\r\n            {\r\n                label: \"RSI\",\r\n                data: indicators.map(item => item.rsi),\r\n                borderColor: \"purple\",\r\n                fill: false,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div className={styles.graphContainer}>\r\n            <h2>Technical Indicators for Ticker {tickerId.tickerId}</h2>\r\n            <Line data={chartData} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GraphComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}